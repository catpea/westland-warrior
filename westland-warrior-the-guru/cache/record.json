{
  "name": "westland-warrior-the-guru",
  "id": "westland-warrior-the-guru",
  "title": "The Guru",
  "date": "2020-02-05T03:29:57.836Z",
  "image": "warrior-the-guru-cover.jpg",
  "attachments": {},
  "html": "<div class=\"section yt\">\n  <header>\n    <h2>Keyboards &amp; Command Line Interfaces</h2>\n  </header>\n  <figure>\n    <a href=\"https://www.youtube.com/watch?v=4RPtJ9UyHS0\" class=\"no-tufte-underline\" title=\"Keyboards &amp; Command Line Interfaces\">\n      <img src=\"/image/yid-4RPtJ9UyHS0.jpg\" alt=\"Keyboards &amp; Command Line Interfaces\">\n    </a>\n    <figcaption>Keyboards &amp; Command Line Interfaces</figcaption>\n  </figure>\n  <p><a href=\"https://www.youtube.com/watch?v=4RPtJ9UyHS0\" title=\"Keyboards &amp; Command Line Interfaces\">Play Video</a></p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Crash Course Computer Science</h2>\n  </header>\n  <p>Watch the <a href=\"https://www.youtube.com/watch?v=tpIctyqH29Q&amp;list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo\">Full Playlist</a> of 41 videos.</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>A Short Introduction To Commands</h2>\n  </header>\n  <p>A command is a program made easy to execute. In other words by turning a<br>program into a command, the programmer standardizes the execution and<br>customization of the program.</p>\n  <p>Usually programs need compilation, or an interpreter, they need some<br>libraries. Often programs may need to be configured somehow, be it a<br>configuration file, or just editing code. Programs may be hard to run,<br>because every program is different.</p>\n  <p>When a programmer decides to turn his program into a command, something<br>wonderful happens. The programmer adds a bunch of stuff to his program to<br>make it into a command, and thus <em>standardizes</em> the way the program is ran<br>and customized.</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Commands At A Glance</h2>\n  </header>\n  <p>Here is what a command really looks like:</p>\n  <p>command-name --some-argument value-of-the-argument</p>\n  <p>gmail --recipient alice@aol.com --subject &quot;I can&#39;t even!&quot; --message &quot;I<br>can&#39;t freaking believe it, commands are cool, rawr!&quot;</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Commands Can Do Anything</h2>\n  </header>\n  <p>Commands usually come in groups, for example there is a group of commands<br>that manage files and directories, a group of commands that compress files,<br>or download files across the internet.</p>\n</div>\n<div class=\"section yt\">\n  <header>\n    <h2>Getting Around in the Unix Command Line Interface</h2>\n  </header>\n  <figure>\n    <a href=\"https://www.youtube.com/watch?v=RuusmAGbnOo\" class=\"no-tufte-underline\" title=\"Getting Around in the Unix Command Line Interface\">\n      <img src=\"/image/yid-RuusmAGbnOo.jpg\" alt=\"Getting Around in the Unix Command Line Interface\">\n    </a>\n    <figcaption>Getting Around in the Unix Command Line Interface</figcaption>\n  </figure>\n  <p><a href=\"https://www.youtube.com/watch?v=RuusmAGbnOo\" title=\"Getting Around in the Unix Command Line Interface\">Play Video</a></p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Full Raspberry Pi Tutorial Playlist</h2>\n  </header>\n  <p>\n    <a href=\"https://www.youtube.com/watch?v&#x3D;Jj4pjfU_-jo&amp;list&#x3D;PLsa31gkyINsly6N_usaeHrtDPYnwxO-1Y\">Full Raspberry Pi Tutorial Playlist &raquo;</a>\n  </p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>File Management Commands</h2>\n  </header>\n  <p>Manage files and directories with <a href=\"http://man7.org/linux/man-pages/man1/touch.1.html\">touch</a>, <a href=\"http://man7.org/linux/man-pages/man1/ls.1.html\">ls</a>, <a href=\"http://man7.org/linux/man-pages/man1/cp.1.html\">cp</a>, <a href=\"http://man7.org/linux/man-pages/man1/mkdir.1.html\">mkdir</a>,<br><a href=\"http://man7.org/linux/man-pages/man1/rmdir.1.html\">rmdir</a>, <a href=\"http://man7.org/linux/man-pages/man1/mv.1.html\">mv</a>, and <a href=\"http://man7.org/linux/man-pages/man1/rm.1.html\">rm</a> to name a few. If you use a file manager<br>with a graphic user interface (GUI), then you don&#39;t need to worry about<br>these.</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>File Compression Commands</h2>\n  </header>\n  <p>A group of commands for compressing files to save space <a href=\"https://linux.die.net/man/1/gzip\">gzip</a>,<br><a href=\"http://man7.org/linux/man-pages/man1/tar.1.html\">tar</a>, and <a href=\"https://linux.die.net/man/1/bzip2\">bzip2</a> to name a few.</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>File Download Command</h2>\n  </header>\n  <p>Some commands are so good at what they do there is only a couple of them<br><a href=\"http://man7.org/linux/man-pages/man1/wget.1.html\">wget</a> and <a href=\"http://man7.org/linux/man-pages/man1/curl.1.html\">curl</a> are a good example of that. cURL downloads files<br>really well, it is also very frequently used for debugging or testing<br>web-servers that serve files, it is a very efficient program. wget is<br>awesome at resuming downloads and downloading large files, it actually has<br>a feature that not only downloads a web page, but also all the images and<br>other web pages that are linked to it.</p>\n  <p>There are also some really eyebrow raising commands like <a href=\"https://github.com/ytdl-org/youtube-dl/blob/master/README.md\">youtube-dl</a><br>which comes with an --extract-audio argument, meaning, it will make an mp3<br>out of a video.</p>\n  <p>I don&#39;t know what Alphabet&#39;s Terms of Service state on the subject of<br>downloading their data. I don&#39;t recommend you use this command, unless you<br>familiarize yourself with their Terms of Service, specifics of downloading<br>content with third-party tools, and own the content yourself. Note that it<br>is not just a YouTube account that may get suspended, but all the rest too,<br>gmail and google docs, stuff on your android phone, etc.</p>\n  <p>Here is what the command would look for a YouTube Creator hoping to make a<br>backup of a particular video.</p>\n  <p>youtube-dl <a href=\"https://www.youtube.com/watch?v=YOUR%5C_VIDEO%5C_ID\">https://www.youtube.com/watch?v=YOUR\\_VIDEO\\_ID</a></p>\n  <p>And here is the code for saving just the audio it self, this is useful for<br>making an audio only version of an adventure video or remixing your content<br>in a song.</p>\n  <p>youtube-dl --extract-audio --audio-format mp3<br><a href=\"https://www.youtube.com/watch?v=YOUR%5C_VIDEO%5C_ID\">https://www.youtube.com/watch?v=YOUR\\_VIDEO\\_ID</a></p>\n  <p>Look how simple and easy to read. Commands can save you from thousands of<br>mouse clicks and hours of annoying, repetitive work. Commands are a<br>beautiful invention. Graphic user interfaces are helpful when learning<br>computers, but eventually they will force you into a world of clicks.</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Commands Are Friends!</h2>\n  </header>\n  <p>It is so awesome to just open a terminal, type in gmail alice@aol.com -s<br>&quot;About Cybertruck&quot; -m &quot;So did you get the $69K build?&quot; and go have your<br>Irish Breakfast Tea (or an Earl Gray with an extra lump of sugar and an<br>extended pinkie) a whole 35 seconds earlier, because you didn&#39;t have to<br>wait for the mail window to open and start sucking memory whilst inspecting<br>its innards.</p>\n</div>\n<div class=\"section yt\">\n  <header>\n    <h2>How To Hack Time</h2>\n  </header>\n  <figure>\n    <a href=\"https://www.youtube.com/watch?v=KEkrWRHCDQU\" class=\"no-tufte-underline\" title=\"How To Hack Time\">\n      <img src=\"/image/yid-KEkrWRHCDQU.jpg\" alt=\"How To Hack Time\">\n    </a>\n    <figcaption>How To Hack Time</figcaption>\n  </figure>\n  <p><a href=\"https://www.youtube.com/watch?v=KEkrWRHCDQU\" title=\"How To Hack Time\">Play Video</a></p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Simplicity Lost</h2>\n  </header>\n  <p>Originally, the beauty of commands was in being predictable, readable, and<br>not causing surprises. UNIX style operating systems, are well thought out.<br>But, people will cram a lot more than they should, and it gets out of<br>control, here is a mild example of mixing some video files with the ffmpeg<br>command.</p>\n  <p>ffmpeg -i test1.avi -i test2.avi -vcodec copy -acodec copy -vcodec copy<br>-acodec copy test12.avi -newvideo -newaudio</p>\n  <p>I have some guesses as to what the ff stands for. You can visit the manual<br>page here: <a href=\"https://linux.die.net/man/1/ffmpeg\">https://linux.die.net/man/1/ffmpeg</a></p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Pipes</h2>\n  </header>\n  <p>There is a feature in the command world, that can deal with high<br>complexity, and that is the pipe. Meaning two commands can be connected by<br>a pipe in the following manner</p>\n  <p>print &quot;hello world&quot; | uppercase</p>\n  <p>This would result in changing all text to uppercase, and printing it on the<br>screen.</p>\n  <p>HELLO WORLD</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Redirects</h2>\n  </header>\n  <p>There is also a feature of pipes that creates files and that is the greater<br>than symbol &quot;&gt;&quot;.</p>\n  <p>print &quot;hello world&quot; | uppercase &gt; greetings.txt</p>\n  <p>This would result in changing all text to uppercase too, but instead of<br>seeing &quot;HELLO WORLD&quot; on the screen weâ€™d see it in the file named<br>greetings.txt</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>User Interface</h2>\n  </header>\n  <p>While Pipes and Redirects of the Command Line are often enough. A number of<br>Graphical Pipe Editors exists as well, Node-RED is a nice example.</p>\n</div>\n<div class=\"section yt\">\n  <header>\n    <h2>Node-RED</h2>\n  </header>\n  <figure>\n    <a href=\"https://www.youtube.com/watch?v=vYreeoCoQPI\" class=\"no-tufte-underline\" title=\"Node-RED\">\n      <img src=\"/image/yid-vYreeoCoQPI.jpg\" alt=\"Node-RED\">\n    </a>\n    <figcaption>Node-RED</figcaption>\n  </figure>\n  <p><a href=\"https://www.youtube.com/watch?v=vYreeoCoQPI\" title=\"Node-RED\">Play Video</a></p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Recap and Summary</h2>\n  </header>\n  <p>In The Wizard chapter we learned not to confuse the operating system, with<br>the user interface; as those are two separate kinds of computer programs.</p>\n  <p>Now we learn that UNIX is an operating system with a user interface<br>classified as the <a href=\"https://en.wikipedia.org/wiki/Command-line_interface\">Command-line interface</a>, let us take a closer look at<br>the command-line interface.</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Uniformity of Commands</h2>\n  </header>\n  <p>Once you learn the shape that a command can take, you will be able to use<br>any command on any system.</p>\n  <p>Let us proceed with an imaginary command &quot;print&quot; that has some extra<br>features.</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Command Documentation</h2>\n  </header>\n  <p>Most well behaved commands can be executed with the --help argument, or the<br>-h flag to print some helpful documentation.</p>\n  <p>print --help</p>\n  <p>Popular commands will come with manual pages that can be read with the man<br>command. In this case we would execute: man print</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>The Simplest Form</h2>\n  </header>\n  <p>In the following example there is one argument &quot;hello world&quot;. Without<br>quotes the command would see two arguments &quot;hello&quot; and &quot;world&quot;. Quotes are<br>used to join two or more things together.</p>\n  <p>print &quot;hello world&quot;</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>The Extended Form</h2>\n  </header>\n  <p>In the next example we have a Boolean flag &quot;-u&quot; meaning enable underline<br>mode. To disable the underline mode, you simply remove the -u. Then we have<br>the extended argument &quot;--format&quot; followed by a directive &quot;capitalize&quot;.<br>Supported directives can be found in documentation.</p>\n  <p>print -u --format capitalize &quot;hello world&quot;</p>\n  <p>To make things easier to type, most commands allow short form of extended<br>arguments, so --format can become -f.</p>\n  <p>print -u -f capitalize &quot;hello world&quot;</p>\n  <p>Conversely, most one letter arguments/flags have an extended form that<br>begins with two hyphens. Note how -u changed to --underline.</p>\n  <p>print --underline -f capitalize &quot;hello world&quot;</p>\n  <p>For clarity and readability, I recommend using extended forms.</p>\n  <p>print --underline --format capitalize &quot;hello world&quot;</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Why would anyone want to apply a Command-line interface to something?</h2>\n  </header>\n  <p>Because of the uniformity of command syntax. Once you know how to run one<br>command, you know how to run them all. You just need to pull up the<br>documentation to see what all the commands are and what arguments they<br>accept.</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>What other complex systems can the Command-line interface be successfully applied to?</h2>\n  </header>\n  <p>Any complex system can be controlled through a command-line interface.</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Your Car</h2>\n  </header>\n  <p>lights --highbeams on</p>\n  <p>lights --highbeams off</p>\n  <p>dashboard --engine-light off</p>\n  <p>glovebox --lock passw0rd1</p>\n  <p>glovebox --unlock passw0rd1</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Your House</h2>\n  </header>\n  <p>lights --off</p>\n  <p>stove --off</p>\n  <p>thermostat --heat 72</p>\n  <p>coffeemaker --on 6AM</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Office Shenanigans</h2>\n  </header>\n  <p>Please read <a href=\"https://github.com/NARKOZ/hacker-scripts\">github.com/NARKOZ/hacker-scripts</a> Which &quot;hack&quot; this poor<br>bastard&#39;s coffemaker, soon to be ruined romantic life, a particularly needy<br>customer, and alcoholism. Based on a true story, apparently.</p>\n  <p>Please note how the community of geeks that love this story came together<br>and started re-creating these &quot;hacker&quot; scripts in the programming languages<br>they favor; probably out of sadness.</p>\n  <p>Here is the Node.js Version of <a href=\"https://github.com/NARKOZ/hacker-scripts/blob/master/nodejs/fucking_coffee.js\">fucking_coffee.js</a>. Note that once the<br>telnet connection is established at line number 22, we begin using the<br>coffeemaker command-line interface: sys brew (line 26), sys pour (line 32).</p>\n  <p>Don&#39;t think of the coffeemaker as running UNIX, just think of it as it<br>being controlled by a command line interface somewhere.</p>\n  <p>Any machine with a button or two is a system with enough complexity to<br>benefit from a command-line interface.</p>\n  <p>Note how you have never programmed a coffeemaker before, and yet you know<br>precisely - and may even remember for months to come - the commands &quot;sys<br>brew&quot; and &quot;sys pour&quot;.</p>\n  <p>sys brew</p>\n  <p>sys pour</p>\n  <p>It seems sys is a single command that looks at the first text argument.<br>Executing sys -h would probably print:</p>\n  <p> Coffemaker Help ---- -h / --help print this text -v / --verbose print<br>debugging information -b / --brew / or simply brew start brewing -p /<br>--pour / or simply pour start pouring -r / --reboot / or simply reboot<br>reboot the system ... </p>\n  <p>Lack of proper etiquette, and using text (brew) instead of arguments<br>(--brew/-b) can be an indication of sys being a script that does not take<br>the time to parse anything it just looks at the first thing after the<br>command name. It is actually difficult to parse arguments (-b/--brew), it<br>takes no effort at all to use raw text (brew).</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Smart Coffeemaker</h2>\n  </header>\n  <figure>\n    <img src=\"/image/section8.png\" alt=\"Smart Coffeemaker\">\n  </figure>\n  <p><a href=\"https://www.mrcoffee.com/wemo-landing-page.html\">Mr. Coffee Smart Coffeemaker enabled with WeMo</a> can be controlled with the bootleg <a href=\"https://github.com/timonreinhard/wemo-client\">node.js client for WeMo</a> found on github. As a bonus, you can control burn down you entire house, plus the Coffeemaker.</p>\n</div>\n<div class=\"section\">\n  <header>\n    <h2>Smarter Coffeemaker</h2>\n  </header>\n  <figure>\n    <img src=\"/image/wemo-schedule.jpg\" alt=\"Smarter Coffeemaker\">\n  </figure>\n  <p>I was unable to locate the coffeemaker from the story. Personally I&#39;d just<br>stick a <a href=\"https://www.raspberrypi.org/\">Raspberry PI</a> into a cheap one and make my own sys command<br>(with proper argument parsing).</p>\n  <p>If you are courageous enough to do this, might as well install a small web<br>server, <a href=\"https://en.wikipedia.org/wiki/Trojan_Room_coffee_pot\">stream the coffeemaker</a> using the <a href=\"https://www.raspberrypi.org/products/camera-module-v2/\">camera board module</a>, and<br>let people brew you one for a small <a href=\"https://stripe.com/\">fee of $9.95</a> while you <a href=\"https://gohugo.io/getting-started/quick-start/\">blog about<br>the experience</a> on the PI it self.</p>\n</div>",
  "print": "<div class=\"section yt avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <span>Keyboards & Command Line Interfaces<sup>[1]</sup></span>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Crash Course Computer Science</h2>\n  </header>\n  <div class=\"paragraph\">Watch the <span>Full Playlist<sup>[2]</sup></span> of 41 videos.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>A Short Introduction To Commands</h2>\n  </header>\n  <div class=\"paragraph\">A command is a program made easy to execute. In other words by turning a<br>program into a command, the programmer standardizes the execution and<br>customization of the program.</div>\n  <div class=\"paragraph\">Usually programs need compilation, or an interpreter, they need some<br>libraries. Often programs may need to be configured somehow, be it a<br>configuration file, or just editing code. Programs may be hard to run,<br>because every program is different.</div>\n  <div class=\"paragraph\">When a programmer decides to turn his program into a command, something<br>wonderful happens. The programmer adds a bunch of stuff to his program to<br>make it into a command, and thus <em>standardizes</em> the way the program is ran<br>and customized.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Commands At A Glance</h2>\n  </header>\n  <div class=\"paragraph\">Here is what a command really looks like:</div>\n  <div class=\"paragraph\">command-name --some-argument value-of-the-argument</div>\n  <div class=\"paragraph\">gmail --recipient alice@aol.com --subject \"I can't even!\" --message \"I<br>can't freaking believe it, commands are cool, rawr!\"</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Commands Can Do Anything</h2>\n  </header>\n  <div class=\"paragraph\">Commands usually come in groups, for example there is a group of commands<br>that manage files and directories, a group of commands that compress files,<br>or download files across the internet.</div>\n</div>\n<div class=\"section yt avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <span>Getting Around in the Unix Command Line Interface<sup>[3]</sup></span>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Full Raspberry Pi Tutorial Playlist</h2>\n  </header>\n  <div class=\"paragraph\">\n    <span>Full Raspberry Pi Tutorial Playlist Â»<sup>[4]</sup></span>\n  </div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>File Management Commands</h2>\n  </header>\n  <div class=\"paragraph\">Manage files and directories with <span>touch<sup>[5]</sup></span>, <span>ls<sup>[6]</sup></span>, <span>cp<sup>[7]</sup></span>, <span>mkdir<sup>[8]</sup></span>,<br><span>rmdir<sup>[9]</sup></span>, <span>mv<sup>[10]</sup></span>, and <span>rm<sup>[11]</sup></span> to name a few. If you use a file manager<br>with a graphic user interface (GUI), then you don't need to worry about<br>these.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>File Compression Commands</h2>\n  </header>\n  <div class=\"paragraph\">A group of commands for compressing files to save space <span>gzip<sup>[12]</sup></span>,<br><span>tar<sup>[13]</sup></span>, and <span>bzip2<sup>[14]</sup></span> to name a few.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>File Download Command</h2>\n  </header>\n  <div class=\"paragraph\">Some commands are so good at what they do there is only a couple of them<br><span>wget<sup>[15]</sup></span> and <span>curl<sup>[16]</sup></span> are a good example of that. cURL downloads files<br>really well, it is also very frequently used for debugging or testing<br>web-servers that serve files, it is a very efficient program. wget is<br>awesome at resuming downloads and downloading large files, it actually has<br>a feature that not only downloads a web page, but also all the images and<br>other web pages that are linked to it.</div>\n  <div class=\"paragraph\">There are also some really eyebrow raising commands like <span>youtube-dl<sup>[17]</sup></span><br>which comes with an --extract-audio argument, meaning, it will make an mp3<br>out of a video.</div>\n  <div class=\"paragraph\">I don't know what Alphabet's Terms of Service state on the subject of<br>downloading their data. I don't recommend you use this command, unless you<br>familiarize yourself with their Terms of Service, specifics of downloading<br>content with third-party tools, and own the content yourself. Note that it<br>is not just a YouTube account that may get suspended, but all the rest too,<br>gmail and google docs, stuff on your android phone, etc.</div>\n  <div class=\"paragraph\">Here is what the command would look for a YouTube Creator hoping to make a<br>backup of a particular video.</div>\n  <div class=\"paragraph\">youtube-dl <span>https://www.youtube.com/watch?v=YOUR\\_VIDEO\\_ID<sup>[18]</sup></span></div>\n  <div class=\"paragraph\">And here is the code for saving just the audio it self, this is useful for<br>making an audio only version of an adventure video or remixing your content<br>in a song.</div>\n  <div class=\"paragraph\">youtube-dl --extract-audio --audio-format mp3<br><span>https://www.youtube.com/watch?v=YOUR\\_VIDEO\\_ID<sup>[19]</sup></span></div>\n  <div class=\"paragraph\">Look how simple and easy to read. Commands can save you from thousands of<br>mouse clicks and hours of annoying, repetitive work. Commands are a<br>beautiful invention. Graphic user interfaces are helpful when learning<br>computers, but eventually they will force you into a world of clicks.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Commands Are Friends!</h2>\n  </header>\n  <div class=\"paragraph\">It is so awesome to just open a terminal, type in gmail alice@aol.com -s<br>\"About Cybertruck\" -m \"So did you get the $69K build?\" and go have your<br>Irish Breakfast Tea (or an Earl Gray with an extra lump of sugar and an<br>extended pinkie) a whole 35 seconds earlier, because you didn't have to<br>wait for the mail window to open and start sucking memory whilst inspecting<br>its innards.</div>\n</div>\n<div class=\"section yt avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <span>How To Hack Time<sup>[20]</sup></span>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Simplicity Lost</h2>\n  </header>\n  <div class=\"paragraph\">Originally, the beauty of commands was in being predictable, readable, and<br>not causing surprises. UNIX style operating systems, are well thought out.<br>But, people will cram a lot more than they should, and it gets out of<br>control, here is a mild example of mixing some video files with the ffmpeg<br>command.</div>\n  <div class=\"paragraph\">ffmpeg -i test1.avi -i test2.avi -vcodec copy -acodec copy -vcodec copy<br>-acodec copy test12.avi -newvideo -newaudio</div>\n  <div class=\"paragraph\">I have some guesses as to what the ff stands for. You can visit the manual<br>page here: <span>https://linux.die.net/man/1/ffmpeg<sup>[21]</sup></span></div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Pipes</h2>\n  </header>\n  <div class=\"paragraph\">There is a feature in the command world, that can deal with high<br>complexity, and that is the pipe. Meaning two commands can be connected by<br>a pipe in the following manner</div>\n  <div class=\"paragraph\">print \"hello world\" | uppercase</div>\n  <div class=\"paragraph\">This would result in changing all text to uppercase, and printing it on the<br>screen.</div>\n  <div class=\"paragraph\">HELLO WORLD</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Redirects</h2>\n  </header>\n  <div class=\"paragraph\">There is also a feature of pipes that creates files and that is the greater<br>than symbol \"&gt;\".</div>\n  <div class=\"paragraph\">print \"hello world\" | uppercase &gt; greetings.txt</div>\n  <div class=\"paragraph\">This would result in changing all text to uppercase too, but instead of<br>seeing \"HELLO WORLD\" on the screen weâ€™d see it in the file named<br>greetings.txt</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>User Interface</h2>\n  </header>\n  <div class=\"paragraph\">While Pipes and Redirects of the Command Line are often enough. A number of<br>Graphical Pipe Editors exists as well, Node-RED is a nice example.</div>\n</div>\n<div class=\"section yt avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <span>Node-RED<sup>[22]</sup></span>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Recap and Summary</h2>\n  </header>\n  <div class=\"paragraph\">In The Wizard chapter we learned not to confuse the operating system, with<br>the user interface; as those are two separate kinds of computer programs.</div>\n  <div class=\"paragraph\">Now we learn that UNIX is an operating system with a user interface<br>classified as the <span>Command-line interface<sup>[23]</sup></span>, let us take a closer look at<br>the command-line interface.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Uniformity of Commands</h2>\n  </header>\n  <div class=\"paragraph\">Once you learn the shape that a command can take, you will be able to use<br>any command on any system.</div>\n  <div class=\"paragraph\">Let us proceed with an imaginary command \"print\" that has some extra<br>features.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Command Documentation</h2>\n  </header>\n  <div class=\"paragraph\">Most well behaved commands can be executed with the --help argument, or the<br>-h flag to print some helpful documentation.</div>\n  <div class=\"paragraph\">print --help</div>\n  <div class=\"paragraph\">Popular commands will come with manual pages that can be read with the man<br>command. In this case we would execute: man print</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>The Simplest Form</h2>\n  </header>\n  <div class=\"paragraph\">In the following example there is one argument \"hello world\". Without<br>quotes the command would see two arguments \"hello\" and \"world\". Quotes are<br>used to join two or more things together.</div>\n  <div class=\"paragraph\">print \"hello world\"</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>The Extended Form</h2>\n  </header>\n  <div class=\"paragraph\">In the next example we have a Boolean flag \"-u\" meaning enable underline<br>mode. To disable the underline mode, you simply remove the -u. Then we have<br>the extended argument \"--format\" followed by a directive \"capitalize\".<br>Supported directives can be found in documentation.</div>\n  <div class=\"paragraph\">print -u --format capitalize \"hello world\"</div>\n  <div class=\"paragraph\">To make things easier to type, most commands allow short form of extended<br>arguments, so --format can become -f.</div>\n  <div class=\"paragraph\">print -u -f capitalize \"hello world\"</div>\n  <div class=\"paragraph\">Conversely, most one letter arguments/flags have an extended form that<br>begins with two hyphens. Note how -u changed to --underline.</div>\n  <div class=\"paragraph\">print --underline -f capitalize \"hello world\"</div>\n  <div class=\"paragraph\">For clarity and readability, I recommend using extended forms.</div>\n  <div class=\"paragraph\">print --underline --format capitalize \"hello world\"</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Why would anyone want to apply a Command-line interface to something?</h2>\n  </header>\n  <div class=\"paragraph\">Because of the uniformity of command syntax. Once you know how to run one<br>command, you know how to run them all. You just need to pull up the<br>documentation to see what all the commands are and what arguments they<br>accept.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>What other complex systems can the Command-line interface be successfully applied to?</h2>\n  </header>\n  <div class=\"paragraph\">Any complex system can be controlled through a command-line interface.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Your Car</h2>\n  </header>\n  <div class=\"paragraph\">lights --highbeams on</div>\n  <div class=\"paragraph\">lights --highbeams off</div>\n  <div class=\"paragraph\">dashboard --engine-light off</div>\n  <div class=\"paragraph\">glovebox --lock passw0rd1</div>\n  <div class=\"paragraph\">glovebox --unlock passw0rd1</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Your House</h2>\n  </header>\n  <div class=\"paragraph\">lights --off</div>\n  <div class=\"paragraph\">stove --off</div>\n  <div class=\"paragraph\">thermostat --heat 72</div>\n  <div class=\"paragraph\">coffeemaker --on 6AM</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Office Shenanigans</h2>\n  </header>\n  <div class=\"paragraph\">Please read <span>github.com/NARKOZ/hacker-scripts<sup>[24]</sup></span> Which \"hack\" this poor<br>bastard's coffemaker, soon to be ruined romantic life, a particularly needy<br>customer, and alcoholism. Based on a true story, apparently.</div>\n  <div class=\"paragraph\">Please note how the community of geeks that love this story came together<br>and started re-creating these \"hacker\" scripts in the programming languages<br>they favor; probably out of sadness.</div>\n  <div class=\"paragraph\">Here is the Node.js Version of <span>fucking_coffee.js<sup>[25]</sup></span>. Note that once the<br>telnet connection is established at line number 22, we begin using the<br>coffeemaker command-line interface: sys brew (line 26), sys pour (line 32).</div>\n  <div class=\"paragraph\">Don't think of the coffeemaker as running UNIX, just think of it as it<br>being controlled by a command line interface somewhere.</div>\n  <div class=\"paragraph\">Any machine with a button or two is a system with enough complexity to<br>benefit from a command-line interface.</div>\n  <div class=\"paragraph\">Note how you have never programmed a coffeemaker before, and yet you know<br>precisely - and may even remember for months to come - the commands \"sys<br>brew\" and \"sys pour\".</div>\n  <div class=\"paragraph\">sys brew</div>\n  <div class=\"paragraph\">sys pour</div>\n  <div class=\"paragraph\">It seems sys is a single command that looks at the first text argument.<br>Executing sys -h would probably print:</div>\n  <div class=\"paragraph\"> Coffemaker Help ---- -h / --help print this text -v / --verbose print<br>debugging information -b / --brew / or simply brew start brewing -p /<br>--pour / or simply pour start pouring -r / --reboot / or simply reboot<br>reboot the system ... </div>\n  <div class=\"paragraph\">Lack of proper etiquette, and using text (brew) instead of arguments<br>(--brew/-b) can be an indication of sys being a script that does not take<br>the time to parse anything it just looks at the first thing after the<br>command name. It is actually difficult to parse arguments (-b/--brew), it<br>takes no effort at all to use raw text (brew).</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Smart Coffeemaker</h2>\n  </header>\n  <figure>\n    <img src=\"/image/section8.png\" alt=\"Smart Coffeemaker\" style=\"width: 50%;\">\n  </figure>\n  <div class=\"paragraph\"><span>Mr. Coffee Smart Coffeemaker enabled with WeMo<sup>[26]</sup></span> can be controlled with the bootleg <span>node.js client for WeMo<sup>[27]</sup></span> found on github. As a bonus, you can control burn down you entire house, plus the Coffeemaker.</div>\n</div>\n<div class=\"section avoid-break-inside\" style=\"padding-bottom: 2rem;\">\n  <header>\n    <h2>Smarter Coffeemaker</h2>\n  </header>\n  <figure>\n    <img src=\"/image/wemo-schedule.jpg\" alt=\"Smarter Coffeemaker\" style=\"width: 50%;\">\n  </figure>\n  <div class=\"paragraph\">I was unable to locate the coffeemaker from the story. Personally I'd just<br>stick a <span>Raspberry PI<sup>[28]</sup></span> into a cheap one and make my own sys command<br>(with proper argument parsing).</div>\n  <div class=\"paragraph\">If you are courageous enough to do this, might as well install a small web<br>server, <span>stream the coffeemaker<sup>[29]</sup></span> using the <span>camera board module<sup>[30]</sup></span>, and<br>let people brew you one for a small <span>fee of $9.95<sup>[31]</sup></span> while you <span>blog aboutthe experience<sup>[32]</sup></span> on the PI it self.</div>\n</div>\n<div class=\"break-after\">&nbsp;</div>\n<div>\n  <div class=\"section\" style=\"padding-bottom: 1rem;\">References</div>\n  <div>[1]: https://www.youtube.com/watch?v=4RPtJ9UyHS0</div>\n  <div>[2]: https://www.youtube.com/watch?v=tpIctyqH29Q&list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo</div>\n  <div>[3]: https://www.youtube.com/watch?v=RuusmAGbnOo</div>\n  <div>[4]: https://www.youtube.com/watch?v=Jj4pjfU_-jo&list=PLsa31gkyINsly6N_usaeHrtDPYnwxO-1Y</div>\n  <div>[5]: http://man7.org/linux/man-pages/man1/touch.1.html</div>\n  <div>[6]: http://man7.org/linux/man-pages/man1/ls.1.html</div>\n  <div>[7]: http://man7.org/linux/man-pages/man1/cp.1.html</div>\n  <div>[8]: http://man7.org/linux/man-pages/man1/mkdir.1.html</div>\n  <div>[9]: http://man7.org/linux/man-pages/man1/rmdir.1.html</div>\n  <div>[10]: http://man7.org/linux/man-pages/man1/mv.1.html</div>\n  <div>[11]: http://man7.org/linux/man-pages/man1/rm.1.html</div>\n  <div>[12]: https://linux.die.net/man/1/gzip</div>\n  <div>[13]: http://man7.org/linux/man-pages/man1/tar.1.html</div>\n  <div>[14]: https://linux.die.net/man/1/bzip2</div>\n  <div>[15]: http://man7.org/linux/man-pages/man1/wget.1.html</div>\n  <div>[16]: http://man7.org/linux/man-pages/man1/curl.1.html</div>\n  <div>[17]: https://github.com/ytdl-org/youtube-dl/blob/master/README.md</div>\n  <div>[18]: https://www.youtube.com/watch?v=YOUR%5C_VIDEO%5C_ID</div>\n  <div>[19]: https://www.youtube.com/watch?v=YOUR%5C_VIDEO%5C_ID</div>\n  <div>[20]: https://www.youtube.com/watch?v=KEkrWRHCDQU</div>\n  <div>[21]: https://linux.die.net/man/1/ffmpeg</div>\n  <div>[22]: https://www.youtube.com/watch?v=vYreeoCoQPI</div>\n  <div>[23]: https://en.wikipedia.org/wiki/Command-line_interface</div>\n  <div>[24]: https://github.com/NARKOZ/hacker-scripts</div>\n  <div>[25]: https://github.com/NARKOZ/hacker-scripts/blob/master/nodejs/fucking_coffee.js</div>\n  <div>[26]: https://www.mrcoffee.com/wemo-landing-page.html</div>\n  <div>[27]: https://github.com/timonreinhard/wemo-client</div>\n  <div>[28]: https://www.raspberrypi.org/</div>\n  <div>[29]: https://en.wikipedia.org/wiki/Trojan_Room_coffee_pot</div>\n  <div>[30]: https://www.raspberrypi.org/products/camera-module-v2/</div>\n  <div>[31]: https://stripe.com/</div>\n  <div>[32]: https://gohugo.io/getting-started/quick-start/</div>\n</div>",
  "bootstrap": "<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-header\">Keyboards &amp; Command Line Interfaces</div>\n  <a href=\"https://www.youtube.com/watch?v=4RPtJ9UyHS0\" title=\"Keyboards &amp; Command Line Interfaces\" alt=\"Keyboards &amp; Command Line Interfaces\"><img src=\"/image/yid-4RPtJ9UyHS0.jpg\" alt=\"Keyboards &amp; Command Line Interfaces\" class=\"card-img\"></a>\n  <div class=\"card-body\">\n    <a href=\"https://www.youtube.com/watch?v=4RPtJ9UyHS0\" title=\"Keyboards &amp; Command Line Interfaces\" class=\"btn btn-warning\">Play Video</a>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Crash Course Computer Science</h5>\n    <div class=\"card-text\">\n      <p>Watch the <a href=\"https://www.youtube.com/watch?v=tpIctyqH29Q&amp;list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo\">Full Playlist</a> of 41 videos.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">A Short Introduction To Commands</h5>\n    <div class=\"card-text\">\n      <p>A command is a program made easy to execute. In other words by turning a<br>program into a command, the programmer standardizes the execution and<br>customization of the program.</p>\n      <p>Usually programs need compilation, or an interpreter, they need some<br>libraries. Often programs may need to be configured somehow, be it a<br>configuration file, or just editing code. Programs may be hard to run,<br>because every program is different.</p>\n      <p>When a programmer decides to turn his program into a command, something<br>wonderful happens. The programmer adds a bunch of stuff to his program to<br>make it into a command, and thus <em>standardizes</em> the way the program is ran<br>and customized.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Commands At A Glance</h5>\n    <div class=\"card-text\">\n      <p>Here is what a command really looks like:</p>\n      <p>command-name --some-argument value-of-the-argument</p>\n      <p>gmail --recipient alice@aol.com --subject &quot;I can&#39;t even!&quot; --message &quot;I<br>can&#39;t freaking believe it, commands are cool, rawr!&quot;</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Commands Can Do Anything</h5>\n    <div class=\"card-text\">\n      <p>Commands usually come in groups, for example there is a group of commands<br>that manage files and directories, a group of commands that compress files,<br>or download files across the internet.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-header\">Getting Around in the Unix Command Line Interface</div>\n  <a href=\"https://www.youtube.com/watch?v=RuusmAGbnOo\" title=\"Getting Around in the Unix Command Line Interface\" alt=\"Getting Around in the Unix Command Line Interface\"><img src=\"/image/yid-RuusmAGbnOo.jpg\" alt=\"Getting Around in the Unix Command Line Interface\" class=\"card-img\"></a>\n  <div class=\"card-body\">\n    <a href=\"https://www.youtube.com/watch?v=RuusmAGbnOo\" title=\"Getting Around in the Unix Command Line Interface\" class=\"btn btn-warning\">Play Video</a>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Full Raspberry Pi Tutorial Playlist</h5>\n    <a href=\"https://www.youtube.com/watch?v&#x3D;Jj4pjfU_-jo&amp;list&#x3D;PLsa31gkyINsly6N_usaeHrtDPYnwxO-1Y\" class=\"card-link\">Full Raspberry Pi Tutorial Playlist</a>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">File Management Commands</h5>\n    <div class=\"card-text\">\n      <p>Manage files and directories with <a href=\"http://man7.org/linux/man-pages/man1/touch.1.html\">touch</a>, <a href=\"http://man7.org/linux/man-pages/man1/ls.1.html\">ls</a>, <a href=\"http://man7.org/linux/man-pages/man1/cp.1.html\">cp</a>, <a href=\"http://man7.org/linux/man-pages/man1/mkdir.1.html\">mkdir</a>,<br><a href=\"http://man7.org/linux/man-pages/man1/rmdir.1.html\">rmdir</a>, <a href=\"http://man7.org/linux/man-pages/man1/mv.1.html\">mv</a>, and <a href=\"http://man7.org/linux/man-pages/man1/rm.1.html\">rm</a> to name a few. If you use a file manager<br>with a graphic user interface (GUI), then you don&#39;t need to worry about<br>these.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">File Compression Commands</h5>\n    <div class=\"card-text\">\n      <p>A group of commands for compressing files to save space <a href=\"https://linux.die.net/man/1/gzip\">gzip</a>,<br><a href=\"http://man7.org/linux/man-pages/man1/tar.1.html\">tar</a>, and <a href=\"https://linux.die.net/man/1/bzip2\">bzip2</a> to name a few.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">File Download Command</h5>\n    <div class=\"card-text\">\n      <p>Some commands are so good at what they do there is only a couple of them<br><a href=\"http://man7.org/linux/man-pages/man1/wget.1.html\">wget</a> and <a href=\"http://man7.org/linux/man-pages/man1/curl.1.html\">curl</a> are a good example of that. cURL downloads files<br>really well, it is also very frequently used for debugging or testing<br>web-servers that serve files, it is a very efficient program. wget is<br>awesome at resuming downloads and downloading large files, it actually has<br>a feature that not only downloads a web page, but also all the images and<br>other web pages that are linked to it.</p>\n      <p>There are also some really eyebrow raising commands like <a href=\"https://github.com/ytdl-org/youtube-dl/blob/master/README.md\">youtube-dl</a><br>which comes with an --extract-audio argument, meaning, it will make an mp3<br>out of a video.</p>\n      <p>I don&#39;t know what Alphabet&#39;s Terms of Service state on the subject of<br>downloading their data. I don&#39;t recommend you use this command, unless you<br>familiarize yourself with their Terms of Service, specifics of downloading<br>content with third-party tools, and own the content yourself. Note that it<br>is not just a YouTube account that may get suspended, but all the rest too,<br>gmail and google docs, stuff on your android phone, etc.</p>\n      <p>Here is what the command would look for a YouTube Creator hoping to make a<br>backup of a particular video.</p>\n      <p>youtube-dl <a href=\"https://www.youtube.com/watch?v=YOUR%5C_VIDEO%5C_ID\">https://www.youtube.com/watch?v=YOUR\\_VIDEO\\_ID</a></p>\n      <p>And here is the code for saving just the audio it self, this is useful for<br>making an audio only version of an adventure video or remixing your content<br>in a song.</p>\n      <p>youtube-dl --extract-audio --audio-format mp3<br><a href=\"https://www.youtube.com/watch?v=YOUR%5C_VIDEO%5C_ID\">https://www.youtube.com/watch?v=YOUR\\_VIDEO\\_ID</a></p>\n      <p>Look how simple and easy to read. Commands can save you from thousands of<br>mouse clicks and hours of annoying, repetitive work. Commands are a<br>beautiful invention. Graphic user interfaces are helpful when learning<br>computers, but eventually they will force you into a world of clicks.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Commands Are Friends!</h5>\n    <div class=\"card-text\">\n      <p>It is so awesome to just open a terminal, type in gmail alice@aol.com -s<br>&quot;About Cybertruck&quot; -m &quot;So did you get the $69K build?&quot; and go have your<br>Irish Breakfast Tea (or an Earl Gray with an extra lump of sugar and an<br>extended pinkie) a whole 35 seconds earlier, because you didn&#39;t have to<br>wait for the mail window to open and start sucking memory whilst inspecting<br>its innards.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-header\">How To Hack Time</div>\n  <a href=\"https://www.youtube.com/watch?v=KEkrWRHCDQU\" title=\"How To Hack Time\" alt=\"How To Hack Time\"><img src=\"/image/yid-KEkrWRHCDQU.jpg\" alt=\"How To Hack Time\" class=\"card-img\"></a>\n  <div class=\"card-body\">\n    <a href=\"https://www.youtube.com/watch?v=KEkrWRHCDQU\" title=\"How To Hack Time\" class=\"btn btn-warning\">Play Video</a>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Simplicity Lost</h5>\n    <div class=\"card-text\">\n      <p>Originally, the beauty of commands was in being predictable, readable, and<br>not causing surprises. UNIX style operating systems, are well thought out.<br>But, people will cram a lot more than they should, and it gets out of<br>control, here is a mild example of mixing some video files with the ffmpeg<br>command.</p>\n      <p>ffmpeg -i test1.avi -i test2.avi -vcodec copy -acodec copy -vcodec copy<br>-acodec copy test12.avi -newvideo -newaudio</p>\n      <p>I have some guesses as to what the ff stands for. You can visit the manual<br>page here: <a href=\"https://linux.die.net/man/1/ffmpeg\">https://linux.die.net/man/1/ffmpeg</a></p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Pipes</h5>\n    <div class=\"card-text\">\n      <p>There is a feature in the command world, that can deal with high<br>complexity, and that is the pipe. Meaning two commands can be connected by<br>a pipe in the following manner</p>\n      <p>print &quot;hello world&quot; | uppercase</p>\n      <p>This would result in changing all text to uppercase, and printing it on the<br>screen.</p>\n      <p>HELLO WORLD</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Redirects</h5>\n    <div class=\"card-text\">\n      <p>There is also a feature of pipes that creates files and that is the greater<br>than symbol &quot;&gt;&quot;.</p>\n      <p>print &quot;hello world&quot; | uppercase &gt; greetings.txt</p>\n      <p>This would result in changing all text to uppercase too, but instead of<br>seeing &quot;HELLO WORLD&quot; on the screen weâ€™d see it in the file named<br>greetings.txt</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">User Interface</h5>\n    <div class=\"card-text\">\n      <p>While Pipes and Redirects of the Command Line are often enough. A number of<br>Graphical Pipe Editors exists as well, Node-RED is a nice example.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-header\">Node-RED</div>\n  <a href=\"https://www.youtube.com/watch?v=vYreeoCoQPI\" title=\"Node-RED\" alt=\"Node-RED\"><img src=\"/image/yid-vYreeoCoQPI.jpg\" alt=\"Node-RED\" class=\"card-img\"></a>\n  <div class=\"card-body\">\n    <a href=\"https://www.youtube.com/watch?v=vYreeoCoQPI\" title=\"Node-RED\" class=\"btn btn-warning\">Play Video</a>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Recap and Summary</h5>\n    <div class=\"card-text\">\n      <p>In The Wizard chapter we learned not to confuse the operating system, with<br>the user interface; as those are two separate kinds of computer programs.</p>\n      <p>Now we learn that UNIX is an operating system with a user interface<br>classified as the <a href=\"https://en.wikipedia.org/wiki/Command-line_interface\">Command-line interface</a>, let us take a closer look at<br>the command-line interface.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Uniformity of Commands</h5>\n    <div class=\"card-text\">\n      <p>Once you learn the shape that a command can take, you will be able to use<br>any command on any system.</p>\n      <p>Let us proceed with an imaginary command &quot;print&quot; that has some extra<br>features.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Command Documentation</h5>\n    <div class=\"card-text\">\n      <p>Most well behaved commands can be executed with the --help argument, or the<br>-h flag to print some helpful documentation.</p>\n      <p>print --help</p>\n      <p>Popular commands will come with manual pages that can be read with the man<br>command. In this case we would execute: man print</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">The Simplest Form</h5>\n    <div class=\"card-text\">\n      <p>In the following example there is one argument &quot;hello world&quot;. Without<br>quotes the command would see two arguments &quot;hello&quot; and &quot;world&quot;. Quotes are<br>used to join two or more things together.</p>\n      <p>print &quot;hello world&quot;</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">The Extended Form</h5>\n    <div class=\"card-text\">\n      <p>In the next example we have a Boolean flag &quot;-u&quot; meaning enable underline<br>mode. To disable the underline mode, you simply remove the -u. Then we have<br>the extended argument &quot;--format&quot; followed by a directive &quot;capitalize&quot;.<br>Supported directives can be found in documentation.</p>\n      <p>print -u --format capitalize &quot;hello world&quot;</p>\n      <p>To make things easier to type, most commands allow short form of extended<br>arguments, so --format can become -f.</p>\n      <p>print -u -f capitalize &quot;hello world&quot;</p>\n      <p>Conversely, most one letter arguments/flags have an extended form that<br>begins with two hyphens. Note how -u changed to --underline.</p>\n      <p>print --underline -f capitalize &quot;hello world&quot;</p>\n      <p>For clarity and readability, I recommend using extended forms.</p>\n      <p>print --underline --format capitalize &quot;hello world&quot;</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Why would anyone want to apply a Command-line interface to something?</h5>\n    <div class=\"card-text\">\n      <p>Because of the uniformity of command syntax. Once you know how to run one<br>command, you know how to run them all. You just need to pull up the<br>documentation to see what all the commands are and what arguments they<br>accept.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">What other complex systems can the Command-line interface be successfully applied to?</h5>\n    <div class=\"card-text\">\n      <p>Any complex system can be controlled through a command-line interface.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Your Car</h5>\n    <div class=\"card-text\">\n      <p>lights --highbeams on</p>\n      <p>lights --highbeams off</p>\n      <p>dashboard --engine-light off</p>\n      <p>glovebox --lock passw0rd1</p>\n      <p>glovebox --unlock passw0rd1</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Your House</h5>\n    <div class=\"card-text\">\n      <p>lights --off</p>\n      <p>stove --off</p>\n      <p>thermostat --heat 72</p>\n      <p>coffeemaker --on 6AM</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Office Shenanigans</h5>\n    <div class=\"card-text\">\n      <p>Please read <a href=\"https://github.com/NARKOZ/hacker-scripts\">github.com/NARKOZ/hacker-scripts</a> Which &quot;hack&quot; this poor<br>bastard&#39;s coffemaker, soon to be ruined romantic life, a particularly needy<br>customer, and alcoholism. Based on a true story, apparently.</p>\n      <p>Please note how the community of geeks that love this story came together<br>and started re-creating these &quot;hacker&quot; scripts in the programming languages<br>they favor; probably out of sadness.</p>\n      <p>Here is the Node.js Version of <a href=\"https://github.com/NARKOZ/hacker-scripts/blob/master/nodejs/fucking_coffee.js\">fucking_coffee.js</a>. Note that once the<br>telnet connection is established at line number 22, we begin using the<br>coffeemaker command-line interface: sys brew (line 26), sys pour (line 32).</p>\n      <p>Don&#39;t think of the coffeemaker as running UNIX, just think of it as it<br>being controlled by a command line interface somewhere.</p>\n      <p>Any machine with a button or two is a system with enough complexity to<br>benefit from a command-line interface.</p>\n      <p>Note how you have never programmed a coffeemaker before, and yet you know<br>precisely - and may even remember for months to come - the commands &quot;sys<br>brew&quot; and &quot;sys pour&quot;.</p>\n      <p>sys brew</p>\n      <p>sys pour</p>\n      <p>It seems sys is a single command that looks at the first text argument.<br>Executing sys -h would probably print:</p>\n      <p> Coffemaker Help ---- -h / --help print this text -v / --verbose print<br>debugging information -b / --brew / or simply brew start brewing -p /<br>--pour / or simply pour start pouring -r / --reboot / or simply reboot<br>reboot the system ... </p>\n      <p>Lack of proper etiquette, and using text (brew) instead of arguments<br>(--brew/-b) can be an indication of sys being a script that does not take<br>the time to parse anything it just looks at the first thing after the<br>command name. It is actually difficult to parse arguments (-b/--brew), it<br>takes no effort at all to use raw text (brew).</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <img src=\"/image/section8.png\" alt=\"Smart Coffeemaker\" class=\"card-img-top\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Smart Coffeemaker</h5>\n    <div class=\"card-text\">\n      <p><a href=\"https://www.mrcoffee.com/wemo-landing-page.html\">Mr. Coffee Smart Coffeemaker enabled with WeMo</a> can be controlled with the bootleg <a href=\"https://github.com/timonreinhard/wemo-client\">node.js client for WeMo</a> found on github. As a bonus, you can control burn down you entire house, plus the Coffeemaker.</p>\n    </div>\n  </div>\n</div>\n<div class=\"card card-section bg-dark text-warning shadow\">\n  <img src=\"/image/wemo-schedule.jpg\" alt=\"Smarter Coffeemaker\" class=\"card-img-top\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Smarter Coffeemaker</h5>\n    <div class=\"card-text\">\n      <p>I was unable to locate the coffeemaker from the story. Personally I&#39;d just<br>stick a <a href=\"https://www.raspberrypi.org/\">Raspberry PI</a> into a cheap one and make my own sys command<br>(with proper argument parsing).</p>\n      <p>If you are courageous enough to do this, might as well install a small web<br>server, <a href=\"https://en.wikipedia.org/wiki/Trojan_Room_coffee_pot\">stream the coffeemaker</a> using the <a href=\"https://www.raspberrypi.org/products/camera-module-v2/\">camera board module</a>, and<br>let people brew you one for a small <a href=\"https://stripe.com/\">fee of $9.95</a> while you <a href=\"https://gohugo.io/getting-started/quick-start/\">blog about<br>the experience</a> on the PI it self.</p>\n    </div>\n  </div>\n</div>",
  "text": "Keyboards & Command Line Interfaces\n\nCrash Course Computer Science\n\nWatch the Full Playlist of 41 videos.\n\nA Short Introduction To Commands\n\nA command is a program made easy to execute. In other words by turning aprogram into a command, the programmer standardizes the execution andcustomization of the program.\nUsually programs need compilation, or an interpreter, they need somelibraries. Often programs may need to be configured somehow, be it aconfiguration file, or just editing code. Programs may be hard to run,because every program is different.\nWhen a programmer decides to turn his program into a command, somethingwonderful happens. The programmer adds a bunch of stuff to his program tomake it into a command, and thus standardizes the way the program is ranand customized.\n\nCommands At A Glance\n\nHere is what a command really looks like:\ncommand-name --some-argument value-of-the-argument\ngmail --recipient alice@aol.com --subject \"I can't even!\" --message \"Ican't freaking believe it, commands are cool, rawr!\"\n\nCommands Can Do Anything\n\nCommands usually come in groups, for example there is a group of commandsthat manage files and directories, a group of commands that compress files,or download files across the internet.\n\nGetting Around in the Unix Command Line Interface\n\nFull Raspberry Pi Tutorial Playlist\n\nFull Raspberry Pi Tutorial Playlist Â»\n\nFile Management Commands\n\nManage files and directories with touch, ls, cp, mkdir,rmdir, mv, and rm to name a few. If you use a file managerwith a graphic user interface (GUI), then you don't need to worry aboutthese.\n\nFile Compression Commands\n\nA group of commands for compressing files to save space gzip,tar, and bzip2 to name a few.\n\nFile Download Command\n\nSome commands are so good at what they do there is only a couple of themwget and curl are a good example of that. cURL downloads filesreally well, it is also very frequently used for debugging or testingweb-servers that serve files, it is a very efficient program. wget isawesome at resuming downloads and downloading large files, it actually hasa feature that not only downloads a web page, but also all the images andother web pages that are linked to it.\nThere are also some really eyebrow raising commands like youtube-dlwhich comes with an --extract-audio argument, meaning, it will make an mp3out of a video.\nI don't know what Alphabet's Terms of Service state on the subject ofdownloading their data. I don't recommend you use this command, unless youfamiliarize yourself with their Terms of Service, specifics of downloadingcontent with third-party tools, and own the content yourself. Note that itis not just a YouTube account that may get suspended, but all the rest too,gmail and google docs, stuff on your android phone, etc.\nHere is what the command would look for a YouTube Creator hoping to make abackup of a particular video.\nyoutube-dl https://www.youtube.com/watch?v=YOUR\\_VIDEO\\_ID\nAnd here is the code for saving just the audio it self, this is useful formaking an audio only version of an adventure video or remixing your contentin a song.\nyoutube-dl --extract-audio --audio-format mp3https://www.youtube.com/watch?v=YOUR\\_VIDEO\\_ID\nLook how simple and easy to read. Commands can save you from thousands ofmouse clicks and hours of annoying, repetitive work. Commands are abeautiful invention. Graphic user interfaces are helpful when learningcomputers, but eventually they will force you into a world of clicks.\n\nCommands Are Friends!\n\nIt is so awesome to just open a terminal, type in gmail alice@aol.com -s\"About Cybertruck\" -m \"So did you get the $69K build?\" and go have yourIrish Breakfast Tea (or an Earl Gray with an extra lump of sugar and anextended pinkie) a whole 35 seconds earlier, because you didn't have towait for the mail window to open and start sucking memory whilst inspectingits innards.\n\nHow To Hack Time\n\nSimplicity Lost\n\nOriginally, the beauty of commands was in being predictable, readable, andnot causing surprises. UNIX style operating systems, are well thought out.But, people will cram a lot more than they should, and it gets out ofcontrol, here is a mild example of mixing some video files with the ffmpegcommand.\nffmpeg -i test1.avi -i test2.avi -vcodec copy -acodec copy -vcodec copy-acodec copy test12.avi -newvideo -newaudio\nI have some guesses as to what the ff stands for. You can visit the manualpage here: https://linux.die.net/man/1/ffmpeg\n\nPipes\n\nThere is a feature in the command world, that can deal with highcomplexity, and that is the pipe. Meaning two commands can be connected bya pipe in the following manner\nprint \"hello world\" | uppercase\nThis would result in changing all text to uppercase, and printing it on thescreen.\nHELLO WORLD\n\nRedirects\n\nThere is also a feature of pipes that creates files and that is the greaterthan symbol \">\".\nprint \"hello world\" | uppercase > greetings.txt\nThis would result in changing all text to uppercase too, but instead ofseeing \"HELLO WORLD\" on the screen weâ€™d see it in the file namedgreetings.txt\n\nUser Interface\n\nWhile Pipes and Redirects of the Command Line are often enough. A number ofGraphical Pipe Editors exists as well, Node-RED is a nice example.\n\nNode-RED\n\nRecap and Summary\n\nIn The Wizard chapter we learned not to confuse the operating system, withthe user interface; as those are two separate kinds of computer programs.\nNow we learn that UNIX is an operating system with a user interfaceclassified as the Command-line interface, let us take a closer look atthe command-line interface.\n\nUniformity of Commands\n\nOnce you learn the shape that a command can take, you will be able to useany command on any system.\nLet us proceed with an imaginary command \"print\" that has some extrafeatures.\n\nCommand Documentation\n\nMost well behaved commands can be executed with the --help argument, or the-h flag to print some helpful documentation.\nprint --help\nPopular commands will come with manual pages that can be read with the mancommand. In this case we would execute: man print\n\nThe Simplest Form\n\nIn the following example there is one argument \"hello world\". Withoutquotes the command would see two arguments \"hello\" and \"world\". Quotes areused to join two or more things together.\nprint \"hello world\"\n\nThe Extended Form\n\nIn the next example we have a Boolean flag \"-u\" meaning enable underlinemode. To disable the underline mode, you simply remove the -u. Then we havethe extended argument \"--format\" followed by a directive \"capitalize\".Supported directives can be found in documentation.\nprint -u --format capitalize \"hello world\"\nTo make things easier to type, most commands allow short form of extendedarguments, so --format can become -f.\nprint -u -f capitalize \"hello world\"\nConversely, most one letter arguments/flags have an extended form thatbegins with two hyphens. Note how -u changed to --underline.\nprint --underline -f capitalize \"hello world\"\nFor clarity and readability, I recommend using extended forms.\nprint --underline --format capitalize \"hello world\"\n\nWhy would anyone want to apply a Command-line interface to something?\n\nBecause of the uniformity of command syntax. Once you know how to run onecommand, you know how to run them all. You just need to pull up thedocumentation to see what all the commands are and what arguments theyaccept.\n\nWhat other complex systems can the Command-line interface be successfully applied to?\n\nAny complex system can be controlled through a command-line interface.\n\nYour Car\n\nlights --highbeams on\nlights --highbeams off\ndashboard --engine-light off\nglovebox --lock passw0rd1\nglovebox --unlock passw0rd1\n\nYour House\n\nlights --off\nstove --off\nthermostat --heat 72\ncoffeemaker --on 6AM\n\nOffice Shenanigans\n\nPlease read github.com/NARKOZ/hacker-scripts Which \"hack\" this poorbastard's coffemaker, soon to be ruined romantic life, a particularly needycustomer, and alcoholism. Based on a true story, apparently.\nPlease note how the community of geeks that love this story came togetherand started re-creating these \"hacker\" scripts in the programming languagesthey favor; probably out of sadness.\nHere is the Node.js Version of fucking_coffee.js. Note that once thetelnet connection is established at line number 22, we begin using thecoffeemaker command-line interface: sys brew (line 26), sys pour (line 32).\nDon't think of the coffeemaker as running UNIX, just think of it as itbeing controlled by a command line interface somewhere.\nAny machine with a button or two is a system with enough complexity tobenefit from a command-line interface.\nNote how you have never programmed a coffeemaker before, and yet you knowprecisely - and may even remember for months to come - the commands \"sysbrew\" and \"sys pour\".\nsys brew\nsys pour\nIt seems sys is a single command that looks at the first text argument.Executing sys -h would probably print:\nCoffemaker Help ---- -h / --help print this text -v / --verbose printdebugging information -b / --brew / or simply brew start brewing -p /--pour / or simply pour start pouring -r / --reboot / or simply rebootreboot the system ...\nLack of proper etiquette, and using text (brew) instead of arguments(--brew/-b) can be an indication of sys being a script that does not takethe time to parse anything it just looks at the first thing after thecommand name. It is actually difficult to parse arguments (-b/--brew), ittakes no effort at all to use raw text (brew).\n\nSmart Coffeemaker\n\nMr. Coffee Smart Coffeemaker enabled with WeMo can be controlled with the bootleg node.js client for WeMo found on github. As a bonus, you can control burn down you entire house, plus the Coffeemaker.\n\nSmarter Coffeemaker\n\nI was unable to locate the coffeemaker from the story. Personally I'd juststick a Raspberry PI into a cheap one and make my own sys command(with proper argument parsing).\nIf you are courageous enough to do this, might as well install a small webserver, stream the coffeemaker using the camera board module, andlet people brew you one for a small fee of $9.95 while you blog aboutthe experience on the PI it self.\n\n\n[Full Playlist]: https://www.youtube.com/watch?v=tpIctyqH29Q&list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo\n[Full Raspberry Pi Tutorial Playlist Â»]: https://www.youtube.com/watch?v=Jj4pjfU_-jo&list=PLsa31gkyINsly6N_usaeHrtDPYnwxO-1Y\n[touch]: http://man7.org/linux/man-pages/man1/touch.1.html\n[ls]: http://man7.org/linux/man-pages/man1/ls.1.html\n[cp]: http://man7.org/linux/man-pages/man1/cp.1.html\n[mkdir]: http://man7.org/linux/man-pages/man1/mkdir.1.html\n[rmdir]: http://man7.org/linux/man-pages/man1/rmdir.1.html\n[mv]: http://man7.org/linux/man-pages/man1/mv.1.html\n[rm]: http://man7.org/linux/man-pages/man1/rm.1.html\n[gzip]: https://linux.die.net/man/1/gzip\n[tar]: http://man7.org/linux/man-pages/man1/tar.1.html\n[bzip2]: https://linux.die.net/man/1/bzip2\n[wget]: http://man7.org/linux/man-pages/man1/wget.1.html\n[curl]: http://man7.org/linux/man-pages/man1/curl.1.html\n[youtube-dl]: https://github.com/ytdl-org/youtube-dl/blob/master/README.md\n[https://www.youtube.com/watch?v=YOUR\\_VIDEO\\_ID]: https://www.youtube.com/watch?v=YOUR%5C_VIDEO%5C_ID\n[https://linux.die.net/man/1/ffmpeg]: https://linux.die.net/man/1/ffmpeg\n[Command-line interface]: https://en.wikipedia.org/wiki/Command-line_interface\n[github.com/NARKOZ/hacker-scripts]: https://github.com/NARKOZ/hacker-scripts\n[fucking_coffee.js]: https://github.com/NARKOZ/hacker-scripts/blob/master/nodejs/fucking_coffee.js\n[Mr. Coffee Smart Coffeemaker enabled with WeMo]: https://www.mrcoffee.com/wemo-landing-page.html\n[node.js client for WeMo]: https://github.com/timonreinhard/wemo-client\n[Raspberry PI]: https://www.raspberrypi.org/\n[stream the coffeemaker]: https://en.wikipedia.org/wiki/Trojan_Room_coffee_pot\n[camera board module]: https://www.raspberrypi.org/products/camera-module-v2/\n[fee of $9.95]: https://stripe.com/\n[blog aboutthe experience]: https://gohugo.io/getting-started/quick-start/",
  "images": [
    {
      "title": "Keyboards & Command Line Interfaces",
      "url": "yid-4RPtJ9UyHS0.jpg"
    },
    {
      "title": "Getting Around in the Unix Command Line Interface",
      "url": "yid-RuusmAGbnOo.jpg"
    },
    {
      "title": "How To Hack Time",
      "url": "yid-KEkrWRHCDQU.jpg"
    },
    {
      "title": "Node-RED",
      "url": "yid-vYreeoCoQPI.jpg"
    },
    {
      "title": "Smart Coffeemaker",
      "url": "section8.png"
    },
    {
      "title": "Smarter Coffeemaker",
      "url": "wemo-schedule.jpg"
    }
  ],
  "links": [
    {
      "title": "Keyboards & Command Line Interfaces",
      "url": "https://www.youtube.com/watch?v=4RPtJ9UyHS0",
      "hostname": "www.youtube.com"
    },
    {
      "title": "Full Playlist",
      "url": "https://www.youtube.com/watch?v=tpIctyqH29Q&list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo",
      "hostname": "www.youtube.com"
    },
    {
      "title": "Getting Around in the Unix Command Line Interface",
      "url": "https://www.youtube.com/watch?v=RuusmAGbnOo",
      "hostname": "www.youtube.com"
    },
    {
      "title": "Full Raspberry Pi Tutorial Playlist Â»",
      "url": "https://www.youtube.com/watch?v=Jj4pjfU_-jo&list=PLsa31gkyINsly6N_usaeHrtDPYnwxO-1Y",
      "hostname": "www.youtube.com"
    },
    {
      "title": "touch",
      "url": "http://man7.org/linux/man-pages/man1/touch.1.html",
      "hostname": "man7.org"
    },
    {
      "title": "ls",
      "url": "http://man7.org/linux/man-pages/man1/ls.1.html",
      "hostname": "man7.org"
    },
    {
      "title": "cp",
      "url": "http://man7.org/linux/man-pages/man1/cp.1.html",
      "hostname": "man7.org"
    },
    {
      "title": "mkdir",
      "url": "http://man7.org/linux/man-pages/man1/mkdir.1.html",
      "hostname": "man7.org"
    },
    {
      "title": "rmdir",
      "url": "http://man7.org/linux/man-pages/man1/rmdir.1.html",
      "hostname": "man7.org"
    },
    {
      "title": "mv",
      "url": "http://man7.org/linux/man-pages/man1/mv.1.html",
      "hostname": "man7.org"
    },
    {
      "title": "rm",
      "url": "http://man7.org/linux/man-pages/man1/rm.1.html",
      "hostname": "man7.org"
    },
    {
      "title": "gzip",
      "url": "https://linux.die.net/man/1/gzip",
      "hostname": "linux.die.net"
    },
    {
      "title": "tar",
      "url": "http://man7.org/linux/man-pages/man1/tar.1.html",
      "hostname": "man7.org"
    },
    {
      "title": "bzip2",
      "url": "https://linux.die.net/man/1/bzip2",
      "hostname": "linux.die.net"
    },
    {
      "title": "wget",
      "url": "http://man7.org/linux/man-pages/man1/wget.1.html",
      "hostname": "man7.org"
    },
    {
      "title": "curl",
      "url": "http://man7.org/linux/man-pages/man1/curl.1.html",
      "hostname": "man7.org"
    },
    {
      "title": "youtube-dl",
      "url": "https://github.com/ytdl-org/youtube-dl/blob/master/README.md",
      "hostname": "github.com"
    },
    {
      "title": "https://www.youtube.com/watch?v=YOUR\\_VIDEO\\_ID",
      "url": "https://www.youtube.com/watch?v=YOUR%5C_VIDEO%5C_ID",
      "hostname": "www.youtube.com"
    },
    {
      "title": "How To Hack Time",
      "url": "https://www.youtube.com/watch?v=KEkrWRHCDQU",
      "hostname": "www.youtube.com"
    },
    {
      "title": "https://linux.die.net/man/1/ffmpeg",
      "url": "https://linux.die.net/man/1/ffmpeg",
      "hostname": "linux.die.net"
    },
    {
      "title": "Node-RED",
      "url": "https://www.youtube.com/watch?v=vYreeoCoQPI",
      "hostname": "www.youtube.com"
    },
    {
      "title": "Command-line interface",
      "url": "https://en.wikipedia.org/wiki/Command-line_interface",
      "hostname": "en.wikipedia.org"
    },
    {
      "title": "github.com/NARKOZ/hacker-scripts",
      "url": "https://github.com/NARKOZ/hacker-scripts",
      "hostname": "github.com"
    },
    {
      "title": "fucking_coffee.js",
      "url": "https://github.com/NARKOZ/hacker-scripts/blob/master/nodejs/fucking_coffee.js",
      "hostname": "github.com"
    },
    {
      "title": "Mr. Coffee Smart Coffeemaker enabled with WeMo",
      "url": "https://www.mrcoffee.com/wemo-landing-page.html",
      "hostname": "www.mrcoffee.com"
    },
    {
      "title": "node.js client for WeMo",
      "url": "https://github.com/timonreinhard/wemo-client",
      "hostname": "github.com"
    },
    {
      "title": "Raspberry PI",
      "url": "https://www.raspberrypi.org/",
      "hostname": "www.raspberrypi.org"
    },
    {
      "title": "stream the coffeemaker",
      "url": "https://en.wikipedia.org/wiki/Trojan_Room_coffee_pot",
      "hostname": "en.wikipedia.org"
    },
    {
      "title": "camera board module",
      "url": "https://www.raspberrypi.org/products/camera-module-v2/",
      "hostname": "www.raspberrypi.org"
    },
    {
      "title": "fee of $9.95",
      "url": "https://stripe.com/",
      "hostname": "stripe.com"
    },
    {
      "title": "blog aboutthe experience",
      "url": "https://gohugo.io/getting-started/quick-start/",
      "hostname": "gohugo.io"
    }
  ]
}